version: '3.9'

services:
  app:
    build:
      context: .  # Chemin de construction de l'image Docker
      dockerfile: Dockerfile  # Utilise le Dockerfile dans le même répertoire
    container_name: app-rec
    ports:
      - "5000:5000"  # Expose le port 5000 de l'application Flask
    volumes:
      - ./data:/appli/data  # Monte les données dans le conteneur
      - ./logs:/appli/logs  # Monte les logs dans le conteneur
      - ./users:/appli/users  # Monte les utilisateurs dans le conteneur
    environment:
      FLASK_ENV: development
      SIZE: 500
    env_file:
      - mlflow_and_sp.env  # Fichier d'environnement
    networks:
      - test_network  # Reseau pour la communication entre services
    healthcheck:
      test: ["CMD", "curl", "http://localhost:5000"]  # Vérifie la disponibilité de l'application
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped  # Redémarre automatiquement le conteneur en cas d'échec

  routes_test:
    build:
      context: ./test_app  # Contexte de build du répertoire des tests
    container_name: app-test
    volumes:
      - ./test_app:/app  # Monte les tests dans le conteneur
      - ./users:/app/users
    restart: on-failure  # Redémarre le conteneur en cas d'échec des tests

    depends_on:
      - app  # Dépend du service app pour démarrer
    networks:
      - test_network  # Réseau pour la communication entre services

networks:
  test_network:
    driver: bridge  # Utilise un réseau bridge pour la communication
